from hashlib import md5
from Crypto.Util.number import *

# For CryptoCTF 2023 (https://cr.yp.toc.tf/)
# Shevid

load("attack.sage")

def gen_param(B):
	while True:
		a = randint(B >> 1, B)
		b = randint(B >> 2, B >> 1)
		p = 2**a * 3**b - 1
		if is_prime(p):
			return a, b

p = 4651852759096127491733667803074539573102288457512521355046899661762757394431
Fp2.<i> = GF(p^2, modulus=x^2 + 1)
E_start = EllipticCurve(Fp2, [0, 6, 0, 1, 0])

# Alice
P = E_start(3799366067639160994711391413511701264777392349807255916259320256251336249666*i + 633884628131689177031068067897867565283026098415356709331881575255526844055, 3967348484864888240941807454988077684669074109524399477973520952727771366997*i + 2712354532382043232096058211997452093712477916671679907467703464009558475387)
Q = E_start(560486392227142181240528415381730657098132581407794833013161975335122628946*i + 3215971074127995409351672272900519761566156375365764079386358523254177565572, 2231746347912007096335360835242707156884468521076802738444724241125548841199*i + 1147378568798166954853288670809304301194478550602719730593160186622788033023)
a = ZZ(RR(log(P.order(), 2)))

# Bob
R = E_start(2656280316115888204975052029900945854050191685154131031859911335618240136443*i + 1127449111197960889758916770042950976852995868310602942974825430779982061546, 3477289737920472771668877366806058236254602770820629911886593813749930497839*i + 4646016633241840360901490323351236375375727836768954121794139000985805816564)
S = E_start(2403139149412141532587482679318245468078604585804423116505024414375742701912*i + 2772488504607240668919423445309052101443116827322741849326656561794480962717, 3356599382898540527962106232860239304405841217130774924490318752448476310798*i + 2818004736373436361527915593539097434287090434842750370886675729711731978922)
b = ZZ(RR(log(R.order(), 3)))
assert p == 2^a * 3^b - 1

prime = SIDHPrime(a, b, 1)
sidh_pub = SIDHPublic(prime, E_start, P, Q, R, S, proof=False)

E = EllipticCurve(Fp2, [0, 6, 0, (2070374075904221348548347954672740119972290047985052548426161483408084160515*i + 896749506444795652787374405713981306103783874504413776724865996633074195878), (2497300913991521538985990865799426081199023429830552981773916386651958830387*i + 4243320791854592301388975795466391442631117041175807728844738724691845270777)])
_phi_P = E(76437828586489590038329193939006186966443918785230388533883401536928551274*i + 1854701339851606878866613257086348330205980107370562791121360193846610915298, 3614996124089236146025194675467338095830005859290616536023140003816221458491*i + 1308394538776387115295908857102539180825411698539070801598965381200026966383)
_phi_Q = E(2350346337927935568113772636838467488287314266120334638991371449749383548230*i + 3389994457403704259291228848441313337916860864318549296438418403582347527289, 3514523396038039657181009561828298688334341559779027220238590888980836781356*i + 1132784636339236588815425424619354807485262558088269015122405460656452137103)
bobs_public = BobsPublic(sidh_pub, E, _phi_P, _phi_Q, proof=False)
cdparams = CDParams(sidh_pub, E, _phi_P, _phi_Q, proof=False)
skey = attack(cdparams, bobs_public, proof=False)
print(skey)

ct = bytes.fromhex("50d8ed352ccf3ce6d64b25e50ed67b832dcbcd94dcb7dc8293e813e0c83ace541abb61618d5f971ff5d24fab8a2e")
key = md5(long_to_bytes(skey)).digest()
iv = md5(str(skey).encode()).digest()
cipher = AES.new(key, AES.MODE_CFB, iv=iv)
flag = cipher.decrypt(ct)
print(flag)
